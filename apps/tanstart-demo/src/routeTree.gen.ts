/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/solid-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicTermsRouteImport } from './routes/_public.terms'
import { Route as PublicRoadmapRouteImport } from './routes/_public.roadmap'
import { Route as PublicPrivacyRouteImport } from './routes/_public.privacy'
import { Route as PublicLoginRouteImport } from './routes/_public.login'
import { Route as PublicContactRouteImport } from './routes/_public.contact'
import { Route as PublicAboutRouteImport } from './routes/_public.about'
import { Route as Public404RouteImport } from './routes/_public.404'
import { Route as ProtectedTodosRouteImport } from './routes/_protected/todos'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { ServerRoute as ApiRemultSplatServerRouteImport } from './routes/api/remult.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicTermsRoute = PublicTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => PublicRoute,
} as any)
const PublicRoadmapRoute = PublicRoadmapRouteImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => PublicRoute,
} as any)
const PublicPrivacyRoute = PublicPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PublicContactRoute = PublicContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAboutRoute = PublicAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)
const Public404Route = Public404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedTodosRoute = ProtectedTodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ApiRemultSplatServerRoute = ApiRemultSplatServerRouteImport.update({
  id: '/api/remult/$',
  path: '/api/remult/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/todos': typeof ProtectedTodosRoute
  '/404': typeof Public404Route
  '/about': typeof PublicAboutRoute
  '/contact': typeof PublicContactRoute
  '/login': typeof PublicLoginRoute
  '/privacy': typeof PublicPrivacyRoute
  '/roadmap': typeof PublicRoadmapRoute
  '/terms': typeof PublicTermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/todos': typeof ProtectedTodosRoute
  '/404': typeof Public404Route
  '/about': typeof PublicAboutRoute
  '/contact': typeof PublicContactRoute
  '/login': typeof PublicLoginRoute
  '/privacy': typeof PublicPrivacyRoute
  '/roadmap': typeof PublicRoadmapRoute
  '/terms': typeof PublicTermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/todos': typeof ProtectedTodosRoute
  '/_public/404': typeof Public404Route
  '/_public/about': typeof PublicAboutRoute
  '/_public/contact': typeof PublicContactRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/privacy': typeof PublicPrivacyRoute
  '/_public/roadmap': typeof PublicRoadmapRoute
  '/_public/terms': typeof PublicTermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/todos'
    | '/404'
    | '/about'
    | '/contact'
    | '/login'
    | '/privacy'
    | '/roadmap'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/todos'
    | '/404'
    | '/about'
    | '/contact'
    | '/login'
    | '/privacy'
    | '/roadmap'
    | '/terms'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_protected/dashboard'
    | '/_protected/todos'
    | '/_public/404'
    | '/_public/about'
    | '/_public/contact'
    | '/_public/login'
    | '/_public/privacy'
    | '/_public/roadmap'
    | '/_public/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/remult/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/remult/$'
  id: '__root__' | '/api/auth/$' | '/api/remult/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRemultSplatServerRoute: typeof ApiRemultSplatServerRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/terms': {
      id: '/_public/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof PublicTermsRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/roadmap': {
      id: '/_public/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof PublicRoadmapRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/privacy': {
      id: '/_public/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PublicPrivacyRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/404': {
      id: '/_public/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof Public404RouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/todos': {
      id: '/_protected/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof ProtectedTodosRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}
declare module '@tanstack/solid-start/server' {
  interface ServerFileRoutesByPath {
    '/api/remult/$': {
      id: '/api/remult/$'
      path: '/api/remult/$'
      fullPath: '/api/remult/$'
      preLoaderRoute: typeof ApiRemultSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedTodosRoute: typeof ProtectedTodosRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedTodosRoute: ProtectedTodosRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteChildren {
  Public404Route: typeof Public404Route
  PublicAboutRoute: typeof PublicAboutRoute
  PublicContactRoute: typeof PublicContactRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicPrivacyRoute: typeof PublicPrivacyRoute
  PublicRoadmapRoute: typeof PublicRoadmapRoute
  PublicTermsRoute: typeof PublicTermsRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  Public404Route: Public404Route,
  PublicAboutRoute: PublicAboutRoute,
  PublicContactRoute: PublicContactRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicPrivacyRoute: PublicPrivacyRoute,
  PublicRoadmapRoute: PublicRoadmapRoute,
  PublicTermsRoute: PublicTermsRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRemultSplatServerRoute: ApiRemultSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
