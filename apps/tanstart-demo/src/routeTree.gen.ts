/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/solid-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as Public404RouteImport } from './routes/_public/404'
import { Route as ProtectedTodosRouteImport } from './routes/_protected/todos'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as PublicCompanyTermsRouteImport } from './routes/_public/_company.terms'
import { Route as PublicCompanyRoadmapRouteImport } from './routes/_public/_company.roadmap'
import { Route as PublicCompanyPrivacyRouteImport } from './routes/_public/_company.privacy'
import { Route as PublicCompanyContactRouteImport } from './routes/_public/_company.contact'
import { Route as PublicCompanyAboutRouteImport } from './routes/_public/_company.about'
import { ServerRoute as ApiRemultSplatServerRouteImport } from './routes/api/remult.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRouteRoute,
} as any)
const Public404Route = Public404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => PublicRouteRoute,
} as any)
const ProtectedTodosRoute = ProtectedTodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const PublicCompanyTermsRoute = PublicCompanyTermsRouteImport.update({
  id: '/_company/terms',
  path: '/terms',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompanyRoadmapRoute = PublicCompanyRoadmapRouteImport.update({
  id: '/_company/roadmap',
  path: '/roadmap',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompanyPrivacyRoute = PublicCompanyPrivacyRouteImport.update({
  id: '/_company/privacy',
  path: '/privacy',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompanyContactRoute = PublicCompanyContactRouteImport.update({
  id: '/_company/contact',
  path: '/contact',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompanyAboutRoute = PublicCompanyAboutRouteImport.update({
  id: '/_company/about',
  path: '/about',
  getParentRoute: () => PublicRouteRoute,
} as any)
const ApiRemultSplatServerRoute = ApiRemultSplatServerRouteImport.update({
  id: '/api/remult/$',
  path: '/api/remult/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof ProtectedDashboardRoute
  '/todos': typeof ProtectedTodosRoute
  '/404': typeof Public404Route
  '/login': typeof PublicLoginRoute
  '/': typeof PublicIndexRoute
  '/about': typeof PublicCompanyAboutRoute
  '/contact': typeof PublicCompanyContactRoute
  '/privacy': typeof PublicCompanyPrivacyRoute
  '/roadmap': typeof PublicCompanyRoadmapRoute
  '/terms': typeof PublicCompanyTermsRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof ProtectedDashboardRoute
  '/todos': typeof ProtectedTodosRoute
  '/404': typeof Public404Route
  '/login': typeof PublicLoginRoute
  '/': typeof PublicIndexRoute
  '/about': typeof PublicCompanyAboutRoute
  '/contact': typeof PublicCompanyContactRoute
  '/privacy': typeof PublicCompanyPrivacyRoute
  '/roadmap': typeof PublicCompanyRoadmapRoute
  '/terms': typeof PublicCompanyTermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/todos': typeof ProtectedTodosRoute
  '/_public/404': typeof Public404Route
  '/_public/login': typeof PublicLoginRoute
  '/_public/': typeof PublicIndexRoute
  '/_public/_company/about': typeof PublicCompanyAboutRoute
  '/_public/_company/contact': typeof PublicCompanyContactRoute
  '/_public/_company/privacy': typeof PublicCompanyPrivacyRoute
  '/_public/_company/roadmap': typeof PublicCompanyRoadmapRoute
  '/_public/_company/terms': typeof PublicCompanyTermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/dashboard'
    | '/todos'
    | '/404'
    | '/login'
    | '/'
    | '/about'
    | '/contact'
    | '/privacy'
    | '/roadmap'
    | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/dashboard'
    | '/todos'
    | '/404'
    | '/login'
    | '/'
    | '/about'
    | '/contact'
    | '/privacy'
    | '/roadmap'
    | '/terms'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/_protected/dashboard'
    | '/_protected/todos'
    | '/_public/404'
    | '/_public/login'
    | '/_public/'
    | '/_public/_company/about'
    | '/_public/_company/contact'
    | '/_public/_company/privacy'
    | '/_public/_company/roadmap'
    | '/_public/_company/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/remult/$': typeof ApiRemultSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/remult/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/remult/$'
  id: '__root__' | '/api/auth/$' | '/api/remult/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRemultSplatServerRoute: typeof ApiRemultSplatServerRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/404': {
      id: '/_public/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof Public404RouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_protected/todos': {
      id: '/_protected/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof ProtectedTodosRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_public/_company/terms': {
      id: '/_public/_company/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof PublicCompanyTermsRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/_company/roadmap': {
      id: '/_public/_company/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof PublicCompanyRoadmapRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/_company/privacy': {
      id: '/_public/_company/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PublicCompanyPrivacyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/_company/contact': {
      id: '/_public/_company/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicCompanyContactRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/_company/about': {
      id: '/_public/_company/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicCompanyAboutRouteImport
      parentRoute: typeof PublicRouteRoute
    }
  }
}
declare module '@tanstack/solid-start/server' {
  interface ServerFileRoutesByPath {
    '/api/remult/$': {
      id: '/api/remult/$'
      path: '/api/remult/$'
      fullPath: '/api/remult/$'
      preLoaderRoute: typeof ApiRemultSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedTodosRoute: typeof ProtectedTodosRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedTodosRoute: ProtectedTodosRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  Public404Route: typeof Public404Route
  PublicLoginRoute: typeof PublicLoginRoute
  PublicIndexRoute: typeof PublicIndexRoute
  PublicCompanyAboutRoute: typeof PublicCompanyAboutRoute
  PublicCompanyContactRoute: typeof PublicCompanyContactRoute
  PublicCompanyPrivacyRoute: typeof PublicCompanyPrivacyRoute
  PublicCompanyRoadmapRoute: typeof PublicCompanyRoadmapRoute
  PublicCompanyTermsRoute: typeof PublicCompanyTermsRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  Public404Route: Public404Route,
  PublicLoginRoute: PublicLoginRoute,
  PublicIndexRoute: PublicIndexRoute,
  PublicCompanyAboutRoute: PublicCompanyAboutRoute,
  PublicCompanyContactRoute: PublicCompanyContactRoute,
  PublicCompanyPrivacyRoute: PublicCompanyPrivacyRoute,
  PublicCompanyRoadmapRoute: PublicCompanyRoadmapRoute,
  PublicCompanyTermsRoute: PublicCompanyTermsRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRemultSplatServerRoute: ApiRemultSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
