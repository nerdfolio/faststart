/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicRoadmapRouteImport } from './routes/_public.roadmap'
import { Route as PublicLoginRouteImport } from './routes/_public.login'
import { Route as PublicContactRouteImport } from './routes/_public.contact'
import { Route as PublicAboutRouteImport } from './routes/_public.about'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoadmapRoute = PublicRoadmapRouteImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PublicContactRoute = PublicContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAboutRoute = PublicAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/about': typeof PublicAboutRoute
  '/contact': typeof PublicContactRoute
  '/login': typeof PublicLoginRoute
  '/roadmap': typeof PublicRoadmapRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/about': typeof PublicAboutRoute
  '/contact': typeof PublicContactRoute
  '/login': typeof PublicLoginRoute
  '/roadmap': typeof PublicRoadmapRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_public/about': typeof PublicAboutRoute
  '/_public/contact': typeof PublicContactRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/roadmap': typeof PublicRoadmapRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/about' | '/contact' | '/login' | '/roadmap'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/about' | '/contact' | '/login' | '/roadmap'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_public'
    | '/_protected/dashboard'
    | '/_public/about'
    | '/_public/contact'
    | '/_public/login'
    | '/_public/roadmap'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/roadmap': {
      id: '/_public/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof PublicRoadmapRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteChildren {
  PublicAboutRoute: typeof PublicAboutRoute
  PublicContactRoute: typeof PublicContactRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRoadmapRoute: typeof PublicRoadmapRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutRoute: PublicAboutRoute,
  PublicContactRoute: PublicContactRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRoadmapRoute: PublicRoadmapRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
